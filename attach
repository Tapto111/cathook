#!/usr/bin/env bash

# Verify that we are root
if [ "$(id -u)" -ne 0 ]; then
    echo -e "\033[1;33m\nThis script must be run as root!\n\033[0m"
    exit 1
fi

# Determine the user to run commands as
[[ -n "$SUDO_USER" ]] && RUNUSER="$SUDO_USER" || RUNUSER="$LOGNAME"
RUNCMD="sudo -u $RUNUSER"

# Update and report crash (if those scripts exist)
$RUNCMD bash ./scripts/updater true
$RUNCMD bash ./report-crash true

# Find the hl2_linux process running by the user (for 64-bit TF2)
line=$(pgrep -u "$RUNUSER" hl2_linux)
arr=($line)

# Process argument or pick from running instances
if [ $# -eq 1 ]; then
    proc=$1
else
    if [ ${#arr[@]} -eq 0 ]; then
        echo "TF2 isn't running!"
        exit 1
    fi
    proc=${arr[0]}
fi

echo "Running instances: ${arr[@]}"
echo "Attaching to process ID: $proc"

# Optional: Check if the library is already loaded
# sudo ./detach $inst bin/libcathook.so

# Uncomment to check if already loaded:
# if grep -q "$(realpath bin/libcathook.so)" /proc/"$proc"/maps; then
#   echo "Library already loaded"
#   exit 0
# fi

# Use mktemp for safer temporary file creation
FILENAME=$(mktemp /tmp/.glXXXXXX)

# Ensure the library being injected is compiled for 64-bit architecture
if ! file bin/libcathook.so | grep -q "64-bit"; then
    echo "Error: bin/libcathook.so is not a 64-bit library!"
    rm -f "$FILENAME"
    exit 1
fi

# Copy the library to the temp file
cp "bin/libcathook.so" "$FILENAME"

echo "Loading $FILENAME to process ID $proc"

# Run gdb to attach and load the library
gdbbin="gdb"
$gdbbin -n -q -batch \
    -ex "attach $proc" \
    -ex "echo \033[1mCalling dlopen\033[0m\n" \
    -ex "call ((void*(*)(const char*, int))dlopen)(\"$FILENAME\", 1)" \
    -ex "echo \033[1mCalling dlerror\033[0m\n" \
    -ex "call ((char*(*)(void))dlerror)()" \
    -ex "detach" \
    -ex "quit"

# Clean up the temporary file
rm -f "$FILENAME"

echo "Library injected and temporary file removed."
